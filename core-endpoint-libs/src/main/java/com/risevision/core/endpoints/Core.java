/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-07-22 21:53:01 UTC)
 * on 2014-10-07 at 18:44:45 UTC 
 * Modify at your own risk.
 */

package com.appspot.rvaserver2.core;

/**
 * Service definition for Core (v0).
 *
 * <p>
 * Rise Core API (experimental)
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link CoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Core extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the Rise Core API (experimental) library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://rvaserver2.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "core/v0/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Core(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Core(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Company collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Company.List request = core.company().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Company company() {
    return new Company();
  }

  /**
   * The "company" collection of methods.
   */
  public class Company {

    /**
     * Create a request for the method "company.add".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param data
     * @param parentId
     * @return the request
     */
    public Add add(java.lang.String data, java.lang.String parentId) throws java.io.IOException {
      Add result = new Add(data, parentId);
      initialize(result);
      return result;
    }

    public class Add extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company";

      /**
       * Create a request for the method "company.add".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param data
       * @param parentId
       * @since 1.13
       */
      protected Add(java.lang.String data, java.lang.String parentId) {
        super(Core.this, "PUT", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
        this.parentId = com.google.api.client.util.Preconditions.checkNotNull(parentId, "Required parameter parentId must be specified.");
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Add setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String parentId;

      /**

       */
      public java.lang.String getParentId() {
        return parentId;
      }

      public Add setParentId(java.lang.String parentId) {
        this.parentId = parentId;
        return this;
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.delete".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company";

      /**
       * Create a request for the method "company.delete".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Core.this, "DELETE", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.get".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Get get() throws java.io.IOException {
      Get result = new Get();
      initialize(result);
      return result;
    }

    public class Get extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company";

      /**
       * Create a request for the method "company.get".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Get() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "companies";

      /**
       * Create a request for the method "company.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String count;

      /**

       */
      public java.lang.String getCount() {
        return count;
      }

      public List setCount(java.lang.String count) {
        this.count = count;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String search;

      /**

       */
      public java.lang.String getSearch() {
        return search;
      }

      public List setSearch(java.lang.String search) {
        this.search = search;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String sort;

      /**

       */
      public java.lang.String getSort() {
        return sort;
      }

      public List setSort(java.lang.String sort) {
        this.sort = sort;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public List setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.lookup".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Lookup#execute()} method to invoke the remote operation.
     *
     * @param authKey
     * @return the request
     */
    public Lookup lookup(java.lang.String authKey) throws java.io.IOException {
      Lookup result = new Lookup(authKey);
      initialize(result);
      return result;
    }

    public class Lookup extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company/lookup";

      /**
       * Create a request for the method "company.lookup".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Lookup#execute()} method to invoke the remote operation. <p> {@link
       * Lookup#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param authKey
       * @since 1.13
       */
      protected Lookup(java.lang.String authKey) {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.authKey = com.google.api.client.util.Preconditions.checkNotNull(authKey, "Required parameter authKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Lookup setAlt(java.lang.String alt) {
        return (Lookup) super.setAlt(alt);
      }

      @Override
      public Lookup setFields(java.lang.String fields) {
        return (Lookup) super.setFields(fields);
      }

      @Override
      public Lookup setKey(java.lang.String key) {
        return (Lookup) super.setKey(key);
      }

      @Override
      public Lookup setOauthToken(java.lang.String oauthToken) {
        return (Lookup) super.setOauthToken(oauthToken);
      }

      @Override
      public Lookup setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Lookup) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Lookup setQuotaUser(java.lang.String quotaUser) {
        return (Lookup) super.setQuotaUser(quotaUser);
      }

      @Override
      public Lookup setUserIp(java.lang.String userIp) {
        return (Lookup) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String authKey;

      /**

       */
      public java.lang.String getAuthKey() {
        return authKey;
      }

      public Lookup setAuthKey(java.lang.String authKey) {
        this.authKey = authKey;
        return this;
      }

      @Override
      public Lookup set(String parameterName, Object value) {
        return (Lookup) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.move".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Move#execute()} method to invoke the remote operation.
     *
     * @param authKey
     * @return the request
     */
    public Move move(java.lang.String authKey) throws java.io.IOException {
      Move result = new Move(authKey);
      initialize(result);
      return result;
    }

    public class Move extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company/move";

      /**
       * Create a request for the method "company.move".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Move#execute()} method to invoke the remote operation. <p> {@link
       * Move#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param authKey
       * @since 1.13
       */
      protected Move(java.lang.String authKey) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.authKey = com.google.api.client.util.Preconditions.checkNotNull(authKey, "Required parameter authKey must be specified.");
      }

      @Override
      public Move setAlt(java.lang.String alt) {
        return (Move) super.setAlt(alt);
      }

      @Override
      public Move setFields(java.lang.String fields) {
        return (Move) super.setFields(fields);
      }

      @Override
      public Move setKey(java.lang.String key) {
        return (Move) super.setKey(key);
      }

      @Override
      public Move setOauthToken(java.lang.String oauthToken) {
        return (Move) super.setOauthToken(oauthToken);
      }

      @Override
      public Move setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Move) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Move setQuotaUser(java.lang.String quotaUser) {
        return (Move) super.setQuotaUser(quotaUser);
      }

      @Override
      public Move setUserIp(java.lang.String userIp) {
        return (Move) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String authKey;

      /**

       */
      public java.lang.String getAuthKey() {
        return authKey;
      }

      public Move setAuthKey(java.lang.String authKey) {
        this.authKey = authKey;
        return this;
      }

      @Override
      public Move set(String parameterName, Object value) {
        return (Move) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.regenerateField".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link RegenerateField#execute()} method to invoke the remote operation.
     *
     * @param fieldName
     * @return the request
     */
    public RegenerateField regenerateField(java.lang.String fieldName) throws java.io.IOException {
      RegenerateField result = new RegenerateField(fieldName);
      initialize(result);
      return result;
    }

    public class RegenerateField extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company/regenerate";

      /**
       * Create a request for the method "company.regenerateField".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link RegenerateField#execute()} method to invoke the remote operation.
       * <p> {@link RegenerateField#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param fieldName
       * @since 1.13
       */
      protected RegenerateField(java.lang.String fieldName) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.fieldName = com.google.api.client.util.Preconditions.checkNotNull(fieldName, "Required parameter fieldName must be specified.");
      }

      @Override
      public RegenerateField setAlt(java.lang.String alt) {
        return (RegenerateField) super.setAlt(alt);
      }

      @Override
      public RegenerateField setFields(java.lang.String fields) {
        return (RegenerateField) super.setFields(fields);
      }

      @Override
      public RegenerateField setKey(java.lang.String key) {
        return (RegenerateField) super.setKey(key);
      }

      @Override
      public RegenerateField setOauthToken(java.lang.String oauthToken) {
        return (RegenerateField) super.setOauthToken(oauthToken);
      }

      @Override
      public RegenerateField setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RegenerateField) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RegenerateField setQuotaUser(java.lang.String quotaUser) {
        return (RegenerateField) super.setQuotaUser(quotaUser);
      }

      @Override
      public RegenerateField setUserIp(java.lang.String userIp) {
        return (RegenerateField) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String fieldName;

      /**

       */
      public java.lang.String getFieldName() {
        return fieldName;
      }

      public RegenerateField setFieldName(java.lang.String fieldName) {
        this.fieldName = fieldName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public RegenerateField setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public RegenerateField set(String parameterName, Object value) {
        return (RegenerateField) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "company.update".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param data
     * @param id
     * @return the request
     */
    public Update update(java.lang.String data, java.lang.String id) throws java.io.IOException {
      Update result = new Update(data, id);
      initialize(result);
      return result;
    }

    public class Update extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "company";

      /**
       * Create a request for the method "company.update".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param data
       * @param id
       * @since 1.13
       */
      protected Update(java.lang.String data, java.lang.String id) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Update setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Country collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Country.List request = core.country().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Country country() {
    return new Country();
  }

  /**
   * The "country" collection of methods.
   */
  public class Country {

    /**
     * Create a request for the method "country.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "countries";

      /**
       * Create a request for the method "country.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Display collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Display.List request = core.display().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Display display() {
    return new Display();
  }

  /**
   * The "display" collection of methods.
   */
  public class Display {

    /**
     * Create a request for the method "display.add".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param companyId
     * @param data
     * @return the request
     */
    public Add add(java.lang.String companyId, java.lang.String data) throws java.io.IOException {
      Add result = new Add(companyId, data);
      initialize(result);
      return result;
    }

    public class Add extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "display";

      /**
       * Create a request for the method "display.add".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param companyId
       * @param data
       * @since 1.13
       */
      protected Add(java.lang.String companyId, java.lang.String data) {
        super(Core.this, "PUT", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.companyId = com.google.api.client.util.Preconditions.checkNotNull(companyId, "Required parameter companyId must be specified.");
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public Add setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Add setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "display.delete".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "display";

      /**
       * Create a request for the method "display.delete".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Core.this, "DELETE", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "display.get".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "display";

      /**
       * Create a request for the method "display.get".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "display.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "displays";

      /**
       * Create a request for the method "display.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String count;

      /**

       */
      public java.lang.String getCount() {
        return count;
      }

      public List setCount(java.lang.String count) {
        this.count = count;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String search;

      /**

       */
      public java.lang.String getSearch() {
        return search;
      }

      public List setSearch(java.lang.String search) {
        this.search = search;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String sort;

      /**

       */
      public java.lang.String getSort() {
        return sort;
      }

      public List setSort(java.lang.String sort) {
        this.sort = sort;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public List setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "display.update".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param data
     * @param id
     * @return the request
     */
    public Update update(java.lang.String data, java.lang.String id) throws java.io.IOException {
      Update result = new Update(data, id);
      initialize(result);
      return result;
    }

    public class Update extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "display";

      /**
       * Create a request for the method "display.update".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param data
       * @param id
       * @since 1.13
       */
      protected Update(java.lang.String data, java.lang.String id) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Update setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Presentation collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Presentation.List request = core.presentation().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Presentation presentation() {
    return new Presentation();
  }

  /**
   * The "presentation" collection of methods.
   */
  public class Presentation {

    /**
     * Create a request for the method "presentation.add".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param companyId
     * @param data
     * @return the request
     */
    public Add add(java.lang.String companyId, java.lang.String data) throws java.io.IOException {
      Add result = new Add(companyId, data);
      initialize(result);
      return result;
    }

    public class Add extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentation";

      /**
       * Create a request for the method "presentation.add".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param companyId
       * @param data
       * @since 1.13
       */
      protected Add(java.lang.String companyId, java.lang.String data) {
        super(Core.this, "PUT", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.companyId = com.google.api.client.util.Preconditions.checkNotNull(companyId, "Required parameter companyId must be specified.");
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public Add setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Add setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "presentation.delete".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentation";

      /**
       * Create a request for the method "presentation.delete".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Core.this, "DELETE", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "presentation.get".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentation";

      /**
       * Create a request for the method "presentation.get".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "presentation.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentations";

      /**
       * Create a request for the method "presentation.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String count;

      /**

       */
      public java.lang.String getCount() {
        return count;
      }

      public List setCount(java.lang.String count) {
        this.count = count;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String search;

      /**

       */
      public java.lang.String getSearch() {
        return search;
      }

      public List setSearch(java.lang.String search) {
        this.search = search;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String sort;

      /**

       */
      public java.lang.String getSort() {
        return sort;
      }

      public List setSort(java.lang.String sort) {
        this.sort = sort;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public List setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "presentation.publish".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Publish#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Publish publish(java.lang.String id) throws java.io.IOException {
      Publish result = new Publish(id);
      initialize(result);
      return result;
    }

    public class Publish extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentation/publish";

      /**
       * Create a request for the method "presentation.publish".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Publish#execute()} method to invoke the remote operation. <p>
       * {@link
       * Publish#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Publish(java.lang.String id) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Publish setAlt(java.lang.String alt) {
        return (Publish) super.setAlt(alt);
      }

      @Override
      public Publish setFields(java.lang.String fields) {
        return (Publish) super.setFields(fields);
      }

      @Override
      public Publish setKey(java.lang.String key) {
        return (Publish) super.setKey(key);
      }

      @Override
      public Publish setOauthToken(java.lang.String oauthToken) {
        return (Publish) super.setOauthToken(oauthToken);
      }

      @Override
      public Publish setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Publish) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Publish setQuotaUser(java.lang.String quotaUser) {
        return (Publish) super.setQuotaUser(quotaUser);
      }

      @Override
      public Publish setUserIp(java.lang.String userIp) {
        return (Publish) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Publish setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Publish set(String parameterName, Object value) {
        return (Publish) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "presentation.restore".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Restore#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Restore restore(java.lang.String id) throws java.io.IOException {
      Restore result = new Restore(id);
      initialize(result);
      return result;
    }

    public class Restore extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentation/restore";

      /**
       * Create a request for the method "presentation.restore".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Restore#execute()} method to invoke the remote operation. <p>
       * {@link
       * Restore#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Restore(java.lang.String id) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Restore setAlt(java.lang.String alt) {
        return (Restore) super.setAlt(alt);
      }

      @Override
      public Restore setFields(java.lang.String fields) {
        return (Restore) super.setFields(fields);
      }

      @Override
      public Restore setKey(java.lang.String key) {
        return (Restore) super.setKey(key);
      }

      @Override
      public Restore setOauthToken(java.lang.String oauthToken) {
        return (Restore) super.setOauthToken(oauthToken);
      }

      @Override
      public Restore setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Restore) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Restore setQuotaUser(java.lang.String quotaUser) {
        return (Restore) super.setQuotaUser(quotaUser);
      }

      @Override
      public Restore setUserIp(java.lang.String userIp) {
        return (Restore) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Restore setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Restore set(String parameterName, Object value) {
        return (Restore) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "presentation.update".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param data
     * @param id
     * @return the request
     */
    public Update update(java.lang.String data, java.lang.String id) throws java.io.IOException {
      Update result = new Update(data, id);
      initialize(result);
      return result;
    }

    public class Update extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "presentation";

      /**
       * Create a request for the method "presentation.update".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param data
       * @param id
       * @since 1.13
       */
      protected Update(java.lang.String data, java.lang.String id) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Update setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Schedule collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Schedule.List request = core.schedule().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Schedule schedule() {
    return new Schedule();
  }

  /**
   * The "schedule" collection of methods.
   */
  public class Schedule {

    /**
     * Create a request for the method "schedule.add".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param companyId
     * @param data
     * @return the request
     */
    public Add add(java.lang.String companyId, java.lang.String data) throws java.io.IOException {
      Add result = new Add(companyId, data);
      initialize(result);
      return result;
    }

    public class Add extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "schedule";

      /**
       * Create a request for the method "schedule.add".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param companyId
       * @param data
       * @since 1.13
       */
      protected Add(java.lang.String companyId, java.lang.String data) {
        super(Core.this, "PUT", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.companyId = com.google.api.client.util.Preconditions.checkNotNull(companyId, "Required parameter companyId must be specified.");
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public Add setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Add setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "schedule.delete".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.String id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "schedule";

      /**
       * Create a request for the method "schedule.delete".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.String id) {
        super(Core.this, "DELETE", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Delete setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "schedule.get".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.String id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "schedule";

      /**
       * Create a request for the method "schedule.get".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.String id) {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Get setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "schedule.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "schedules";

      /**
       * Create a request for the method "schedule.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String count;

      /**

       */
      public java.lang.String getCount() {
        return count;
      }

      public List setCount(java.lang.String count) {
        this.count = count;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String search;

      /**

       */
      public java.lang.String getSearch() {
        return search;
      }

      public List setSearch(java.lang.String search) {
        this.search = search;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String sort;

      /**

       */
      public java.lang.String getSort() {
        return sort;
      }

      public List setSort(java.lang.String sort) {
        this.sort = sort;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public List setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "schedule.update".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param data
     * @param id
     * @return the request
     */
    public Update update(java.lang.String data, java.lang.String id) throws java.io.IOException {
      Update result = new Update(data, id);
      initialize(result);
      return result;
    }

    public class Update extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "schedule";

      /**
       * Create a request for the method "schedule.update".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param data
       * @param id
       * @since 1.13
       */
      protected Update(java.lang.String data, java.lang.String id) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Update setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String id;

      /**

       */
      public java.lang.String getId() {
        return id;
      }

      public Update setId(java.lang.String id) {
        this.id = id;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Systemmessage collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Systemmessage.List request = core.systemmessage().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Systemmessage systemmessage() {
    return new Systemmessage();
  }

  /**
   * The "systemmessage" collection of methods.
   */
  public class Systemmessage {

    /**
     * Create a request for the method "systemmessage.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "systemmessages";

      /**
       * Create a request for the method "systemmessage.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public List setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Timezone collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.Timezone.List request = core.timezone().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Timezone timezone() {
    return new Timezone();
  }

  /**
   * The "timezone" collection of methods.
   */
  public class Timezone {

    /**
     * Create a request for the method "timezone.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "timezones";

      /**
       * Create a request for the method "timezone.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the User collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Core core = new Core(...);}
   *   {@code Core.User.List request = core.user().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public User user() {
    return new User();
  }

  /**
   * The "user" collection of methods.
   */
  public class User {

    /**
     * Create a request for the method "user.add".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param companyId
     * @param data
     * @param username
     * @return the request
     */
    public Add add(java.lang.String companyId, java.lang.String data, java.lang.String username) throws java.io.IOException {
      Add result = new Add(companyId, data, username);
      initialize(result);
      return result;
    }

    public class Add extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "user";

      /**
       * Create a request for the method "user.add".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param companyId
       * @param data
       * @param username
       * @since 1.13
       */
      protected Add(java.lang.String companyId, java.lang.String data, java.lang.String username) {
        super(Core.this, "PUT", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.companyId = com.google.api.client.util.Preconditions.checkNotNull(companyId, "Required parameter companyId must be specified.");
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public Add setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Add setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public Add setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.delete".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param username
     * @return the request
     */
    public Delete delete(java.lang.String username) throws java.io.IOException {
      Delete result = new Delete(username);
      initialize(result);
      return result;
    }

    public class Delete extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "user";

      /**
       * Create a request for the method "user.delete".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Delete#execute()} method to invoke the remote operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param username
       * @since 1.13
       */
      protected Delete(java.lang.String username) {
        super(Core.this, "DELETE", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public Delete setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.get".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Get get() throws java.io.IOException {
      Get result = new Get();
      initialize(result);
      return result;
    }

    public class Get extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "user";

      /**
       * Create a request for the method "user.get".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Get#execute()} method to invoke the remote operation. <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Get() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public Get setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.list".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "users";

      /**
       * Create a request for the method "user.list".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Core.this, "GET", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String count;

      /**

       */
      public java.lang.String getCount() {
        return count;
      }

      public List setCount(java.lang.String count) {
        this.count = count;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String search;

      /**

       */
      public java.lang.String getSearch() {
        return search;
      }

      public List setSearch(java.lang.String search) {
        this.search = search;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String sort;

      /**

       */
      public java.lang.String getSort() {
        return sort;
      }

      public List setSort(java.lang.String sort) {
        this.sort = sort;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String companyId;

      /**

       */
      public java.lang.String getCompanyId() {
        return companyId;
      }

      public List setCompanyId(java.lang.String companyId) {
        this.companyId = companyId;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.update".
     *
     * This request holds the parameters needed by the core server.  After setting any optional
     * parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param data
     * @return the request
     */
    public Update update(java.lang.String data) throws java.io.IOException {
      Update result = new Update(data);
      initialize(result);
      return result;
    }

    public class Update extends CoreRequest<com.appspot.rvaserver2.core.model.APIResponse> {

      private static final String REST_PATH = "user";

      /**
       * Create a request for the method "user.update".
       *
       * This request holds the parameters needed by the the core server.  After setting any optional
       * parameters, call the {@link Update#execute()} method to invoke the remote operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param data
       * @since 1.13
       */
      protected Update(java.lang.String data) {
        super(Core.this, "POST", REST_PATH, null, com.appspot.rvaserver2.core.model.APIResponse.class);
        this.data = com.google.api.client.util.Preconditions.checkNotNull(data, "Required parameter data must be specified.");
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String data;

      /**

       */
      public java.lang.String getData() {
        return data;
      }

      public Update setData(java.lang.String data) {
        this.data = data;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public Update setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Core}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Core}. */
    @Override
    public Core build() {
      return new Core(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link CoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setCoreRequestInitializer(
        CoreRequestInitializer coreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(coreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
